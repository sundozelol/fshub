
import React, { useState, useEffect, useRef } from "react";
import { ChatSession } from "@/api/entities";
import { User } from "@/api/entities";
import { KnowledgeBase } from "@/api/entities";
import { AISettings } from "@/api/entities";
import { InvokeLLM } from "@/api/integrations";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Send, RotateCcw, Loader2, ArrowDown } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { SidebarTrigger } from "@/components/ui/sidebar";

import ChatMessage from "../components/chat/ChatMessage";
import TypingIndicator from "../components/chat/TypingIndicator";

export default function ChatPage() {
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [sessionId, setSessionId] = useState(null);
  const [user, setUser] = useState(null);
  const [aiKnowledgeBase, setAiKnowledgeBase] = useState([]);
  const [aiSettings, setAiSettings] = useState(null);
  const [productIndex, setProductIndex] = useState(null); // –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
  const [showScrollButton, setShowScrollButton] = useState(false);
  const messagesEndRef = useRef(null);
  const textareaRef = useRef(null);
  const chatContainerRef = useRef(null);

  useEffect(() => {
    initializeChat();
  }, []);

  useEffect(() => {
    scrollToBottom();
  }, [messages, isTyping]);

  const initializeChat = async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
      
      let currentSessionId = currentUser.session_id;
      if (!currentSessionId) {
        currentSessionId = generateSessionId();
        await User.updateMyUserData({ session_id: currentSessionId });
      }
      
      setSessionId(currentSessionId);
      await loadChatHistory(currentSessionId);

      // –ö—ç—à–∏—Ä—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –í–ö–õ–Æ–ß–ê–Ø –í–°–ï –¢–ò–ü–´ –î–õ–Ø –ò–ò
      const knowledgeItems = await KnowledgeBase.filter({ is_ai_source: true });
      setAiKnowledgeBase(knowledgeItems);
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
      const xmlFeedItem = knowledgeItems.find(item => item.type === 'xml_feed' && item.xml_data?.products);
      if (xmlFeedItem) {
        const index = new Map();
        for (const product of xmlFeedItem.xml_data.products) {
          if (product.vendorCode) {
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞—Ä—Ç–∏–∫—É–ª –≤ —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            const code = String(product.vendorCode).toLowerCase();
            if (!index.has(code)) {
              index.set(code, []);
            }
            index.get(code).push(product);
          }
        }
        setProductIndex(index);
      }

      const settings = await AISettings.list();
      if (settings.length > 0) {
        setAiSettings(settings[0]);
      }

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞:", error);
    }
  };

  const generateSessionId = () => {
    return 'chat_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
  };

  const loadChatHistory = async (sessionId) => {
    try {
      const sessions = await ChatSession.filter({ session_id: sessionId, is_active: true });
      if (sessions.length > 0) {
        const session = sessions[0];
        setMessages(session.messages || []);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:", error);
    }
  };

  const saveChatSession = async (updatedMessages) => {
    if (!sessionId || !user) return;
    
    try {
      const sessions = await ChatSession.filter({ session_id: sessionId });
      const sessionData = {
        session_id: sessionId,
        user_email: user.email,
        messages: updatedMessages,
        last_activity: new Date().toISOString(),
        is_active: true
      };

      if (sessions.length > 0) {
        await ChatSession.update(sessions[0].id, sessionData);
      } else {
        await ChatSession.create(sessionData);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:", error);
    }
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    setShowScrollButton(false); // Hide button when scrolled to bottom
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;
    
    const userMessage = {
      id: Date.now().toString(),
      role: "user",
      content: inputMessage,
      timestamp: new Date().toISOString(),
      attachments: []
    };

    const updatedMessages = [...messages, userMessage];
    setMessages(updatedMessages);
    setInputMessage("");
    setIsTyping(true);

    try {
      const { textResponse, aiAttachments } = await generateAIResponse(inputMessage, updatedMessages);
      const assistantMessage = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: textResponse,
        timestamp: new Date().toISOString(),
        attachments: aiAttachments || [],
      };

      const finalMessages = [...updatedMessages, assistantMessage];
      setMessages(finalMessages);
      await saveChatSession(finalMessages);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:", error);
      const errorMessage = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
        timestamp: new Date().toISOString(),
        attachments: []
      };
      const finalMessages = [...updatedMessages, errorMessage];
      setMessages(finalMessages);
    } finally {
      setIsTyping(false);
    }
  };

  const generateAIResponse = async (message, chatHistory) => {
    try {
      // --- –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ê–†–¢–ò–ö–£–õ–û–í ---
      // –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
      const articleRegex = /\b((?=\w*\d)(?=\w*[a-zA-Z])\w{3,})\b/i;
      const articleMatch = message.match(articleRegex);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (–≤–∏–∑—É–∞–ª—å–Ω—ã–µ/–∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ)
      const knowledgeKeywords = ['—Ç–µ–∫—Å—Ç—É—Ä', '–∏–Ω—Ç–µ—Ä—å–µ—Ä', '—Ñ–æ—Ç–æ', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω', '–∫–∞—Ä—Ç–∏–Ω–∫', '–≤—ã–≥–ª—è–¥–∏—Ç', '—Å–º–æ—Ç—Ä–∏—Ç—Å—è'];
      const hasKnowledgeKeywords = knowledgeKeywords.some(keyword => 
        message.toLowerCase().includes(keyword)
      );

      if (articleMatch && productIndex) {
        const articleCode = articleMatch[1].toLowerCase(); 
        const matchedProducts = productIndex.get(articleCode) || [];

        // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ï—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –Ω–∞–π–¥–µ–Ω –≤ XML-—Ñ–∏–¥–µ –ò –ù–ï–¢ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (matchedProducts.length > 0 && !hasKnowledgeKeywords) {
          const product = matchedProducts[0];

          // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
          const productInfoPayload = {
            type: "product_info",
            data: {
              name: product.name,
              vendorCode: product.vendorCode,
              description: product.description,
              picture: product.picture,
              price: product.price ? `${product.price} —Ä—É–±.` : '–Ω–µ —É–∫–∞–∑–∞–Ω–∞',
              params: product.params || {}
            }
          };
      
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
          const jsonStringResponse = JSON.stringify(productInfoPayload);
          const aiAttachments = product.picture ? [{ name: product.name, url: product.picture, type: 'image' }] : [];
          
          return { textResponse: jsonStringResponse, aiAttachments };
        }

        // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ï—Å–ª–∏ –ù–ï–¢ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ò –∞—Ä—Ç–∏–∫—É–ª –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∏–¥–µ - –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∞—Ä—Ç–∏–∫—É–ª—ã
        if (!hasKnowledgeKeywords && matchedProducts.length === 0) {
          // –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
          const searchPrefix = articleMatch[1].toLowerCase();
          const similarArticles = [];
          
          for (const [key, products] of productIndex) {
            if (key.startsWith(searchPrefix) && key !== searchPrefix) {
              similarArticles.push(...products);
            }
          }
          
          if (similarArticles.length > 0) {
            // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
            const uniqueArticles = similarArticles.reduce((acc, product) => {
              const existingProduct = acc.find(p => p.vendorCode === product.vendorCode);
              if (!existingProduct) {
                acc.push(product);
              }
              return acc;
            }, []);

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            uniqueArticles.sort((a, b) => String(a.vendorCode).localeCompare(String(b.vendorCode)));

            const suggestionText = `–¢–æ—á–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ ${articleMatch[1].toUpperCase()} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø–æ—Ö–æ–∂–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n${
              uniqueArticles.map(product => `üî∏ **${product.vendorCode}** ‚Äî ${product.name}`).join('\n')
            }\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –∞—Ä—Ç–∏–∫—É–ª –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.`;
            
            return { textResponse: suggestionText, aiAttachments: [] };
          } else {
            const notFoundResponse = `–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞—Ä—Ç–∏–∫—É–ª ${articleMatch[1].toUpperCase()} –∏ –ø–æ—Ö–æ–∂–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. 

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`;
            
            return { textResponse: notFoundResponse, aiAttachments: [] };
          }
        }

        // –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ - –∏—â–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)
        if (hasKnowledgeKeywords) {
          // –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
          const knowledgeItems = aiKnowledgeBase.filter(item => item.type !== 'xml_feed');
          let relevantItems = [];

          if (knowledgeItems.length > 0) {
            const itemListForLLM = knowledgeItems.map(item => ({
              title: item.title,
              description: item.description,
              article_code: item.article_code
            }));
            
            if (itemListForLLM.length > 0) {
              const searchPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${message}".
              –ù–∞–π–¥–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞:
              ${JSON.stringify(itemListForLLM, null, 2)}
              –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏—è (title) —Å–∞–º—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.`;

              const jsonSchemaForSearch = {
                type: "object",
                properties: {
                  relevant_titles: {
                    type: "array",
                    items: { type: "string" },
                    description: "–ú–∞—Å—Å–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
                  }
                },
                required: ["relevant_titles"]
              };

              const searchResult = await InvokeLLM({
                prompt: searchPrompt,
                response_json_schema: jsonSchemaForSearch
              });
              
              if (searchResult?.relevant_titles?.length > 0) {
                relevantItems = knowledgeItems.filter(item => 
                  searchResult.relevant_titles.includes(item.title)
                );
              }
            }
          }

          if (relevantItems.length > 0) {
            let knowledgeContext = relevantItems.map(item => {
              let itemContext = `–ò—Å—Ç–æ—á–Ω–∏–∫: ${item.title}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${item.description || ''}\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${item.content || ''}`;
              if (item.url) itemContext += `\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å: ${item.url}`;
              if (item.file_url) itemContext += `\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª: ${item.file_url}`;
              return itemContext;
            }).join("\n\n---\n\n");
            
            const systemPrompt = `${aiSettings?.system_prompt || '–í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.'}\n\n–¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.\n\n–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê:\n1. –û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.\n2. –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Ç–µ –¥–ª—è –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (—Å—Ç–∞—Ç—å–∏, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —Ç–æ–≤–∞—Ä–∞) –µ—Å—Ç—å "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å" –∏–ª–∏ "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª", —Ç—ã –û–ë–Ø–ó–ê–ù –≤–∫–ª—é—á–∏—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ —Å–≤–æ–π –æ—Ç–≤–µ—Ç. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Å—Å—ã–ª–∫–∏ –∫–∞–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: [–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏](URL).\n3. –ï—Å–ª–∏ —Å—Å—ã–ª–æ–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏—Ö –≤—Å–µ.\n4. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Ç–µ, —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º.`;
      
            const prompt = `–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n${knowledgeContext}\n\n–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:\n${chatHistory.slice(-5).map(msg => `${msg.role}: ${msg.content}`).join('\n')}\n\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${message}`;
            
            const textResponse = await InvokeLLM({ prompt: prompt });
      
            const aiAttachments = relevantItems
              .filter(item => item.image_url)
              .map(item => ({ name: item.title, url: item.image_url, type: 'image' }));
      
            return { textResponse, aiAttachments };
          } else {
            // –ï—Å–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –µ—Å—Ç—å, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
            const noMaterialsResponse = `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (—Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç—É—Ä—ã, –∏–Ω—Ç–µ—Ä—å–µ—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è) –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ ${articleMatch[1].toUpperCase()} –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–∞–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö.`;
            
            return { textResponse: noMaterialsResponse, aiAttachments: [] };
          }
        }
      }

      // --- –û–ë–©–ê–Ø –õ–û–ì–ò–ö–ê (–µ—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª—Å—è) ---
      const knowledgeItems = aiKnowledgeBase.filter(item => item.type !== 'xml_feed');
      let relevantItems = [];

      if (knowledgeItems.length > 0) {
        const itemListForLLM = knowledgeItems.map(item => ({
          title: item.title,
          description: item.description,
          article_code: item.article_code
        }));
        
        if (itemListForLLM.length > 0) {
          const searchPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${message}".
          –ù–∞–π–¥–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞:
          ${JSON.stringify(itemListForLLM, null, 2)}
          –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –Ω–∞–∑–≤–∞–Ω–∏—è (title) —Å–∞–º—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.`;

          const jsonSchemaForSearch = {
            type: "object",
            properties: {
              relevant_titles: {
                type: "array",
                items: { type: "string" },
                description: "–ú–∞—Å—Å–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
              }
            },
            required: ["relevant_titles"]
          };

          const searchResult = await InvokeLLM({
            prompt: searchPrompt,
            response_json_schema: jsonSchemaForSearch
          });
          
          if (searchResult?.relevant_titles?.length > 0) {
            let foundItems = knowledgeItems.filter(item => 
              searchResult.relevant_titles.includes(item.title)
            );

            // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –ö–õ–Æ–ß–ï–í–´–ú –°–õ–û–í–ê–ú
            const messageLower = message.toLowerCase();
            
            // –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å "–ª–æ–≥–æ—Ç–∏–ø" - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å "–ª–æ–≥–æ—Ç–∏–ø" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            if (messageLower.includes('–ª–æ–≥–æ—Ç–∏–ø')) {
              foundItems = foundItems.filter(item => 
                item.title.toLowerCase().includes('–ª–æ–≥–æ—Ç–∏–ø')
              );
            }
            // –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è" - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏  
            else if (messageLower.includes('–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü')) {
              foundItems = foundItems.filter(item => 
                item.title.toLowerCase().includes('–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü')
              );
            }
            // –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å "–∫–∞—Ç–∞–ª–æ–≥" - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å "–∫–∞—Ç–∞–ª–æ–≥" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            else if (messageLower.includes('–∫–∞—Ç–∞–ª–æ–≥')) {
              foundItems = foundItems.filter(item => 
                item.title.toLowerCase().includes('–∫–∞—Ç–∞–ª–æ–≥')
              );
            }
            // –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å "—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç" - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å "—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            else if (messageLower.includes('—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç')) {
              foundItems = foundItems.filter(item => 
                item.title.toLowerCase().includes('—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç')
              );
            }
            // –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å "–±—Ä–µ–Ω–¥–±—É–∫" - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å "–±—Ä–µ–Ω–¥–±—É–∫" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            else if (messageLower.includes('–±—Ä–µ–Ω–¥–±—É–∫')) {
              foundItems = foundItems.filter(item => 
                item.title.toLowerCase().includes('–±—Ä–µ–Ω–¥–±—É–∫')
              );
            }

            relevantItems = foundItems;
          }
        }
      }

      if (relevantItems.length > 0) {
        // --- –õ–û–ì–ò–ö–ê –î–õ–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–ê –°–ö–ê–ß–ò–í–ê–ù–ò–Ø ---
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç—ã yandex_disk
        const yandexDiskItems = relevantItems.filter(item => item.type === 'yandex_disk');
        const downloadKeywords = ['—Å–∫–∞—á–∞—Ç—å', '–¥–æ–∫—É–º–µ–Ω—Ç', '—Ñ–∞–π–ª', '–ª–æ–≥–æ', '–∫–∞—Ç–∞–ª–æ–≥', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏', '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', '–±—Ä–µ–Ω–¥–±—É–∫', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü'];
        const isDirectDownloadRequest = downloadKeywords.some(keyword => message.toLowerCase().includes(keyword));
        
        // Check if all relevant items are exclusively Yandex Disk items
        const allRelevantAreYandexDisk = relevantItems.every(item => item.type === 'yandex_disk');

        // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
        // 1. –ó–∞–ø—Ä–æ—Å —è–≤–Ω–æ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ò–õ–ò
        // 2. –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã - —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –ò –∏—Ö –º–∞–ª–æ (1-3 —à—Ç—É–∫–∏)
        const shouldShowAsCards = isDirectDownloadRequest || (allRelevantAreYandexDisk && yandexDiskItems.length > 0 && yandexDiskItems.length <= 3);

        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ yandex_disk - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
        if (yandexDiskItems.length > 1 && shouldShowAsCards) {
            const multiDownloadPayload = {
                type: "multi_download_links",
                data: {
                    items: yandexDiskItems.map(item => ({
                        text: `–°–∫–∞—á–∞—Ç—å "${item.title}"`,
                        url: item.url,
                        title: item.title
                    }))
                }
            };
            return { textResponse: JSON.stringify(multiDownloadPayload), aiAttachments: [] };
        }
        
        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç yandex_disk - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        if (yandexDiskItems.length === 1 && shouldShowAsCards) {
            const item = yandexDiskItems[0];
            const downloadPayload = {
                type: "download_link",
                data: {
                    text: `–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å "${item.title}" –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ`,
                    url: item.url,
                }
            };
            return { textResponse: JSON.stringify(downloadPayload), aiAttachments: [] };
        }

        // --- –û–ë–´–ß–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –û–°–¢–ê–õ–¨–ù–´–• –°–õ–£–ß–ê–ï–í ---
        let knowledgeContext = relevantItems.map(item => {
          let itemContext = `–ò—Å—Ç–æ—á–Ω–∏–∫: ${item.title}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${item.description || ''}\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${item.content || ''}`;
          if (item.url) itemContext += `\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å: ${item.url}`;
          if (item.file_url) itemContext += `\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª: ${item.file_url}`;
          return itemContext;
        }).join("\n\n---\n\n");
        
        const systemPrompt = `${aiSettings?.system_prompt || '–í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.'}\n\n–¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.\n\n–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê:\n1. –û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.\n2. –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Ç–µ –¥–ª—è –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (—Å—Ç–∞—Ç—å–∏, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —Ç–æ–≤–∞—Ä–∞) –µ—Å—Ç—å "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å" –∏–ª–∏ "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª", —Ç—ã –û–ë–Ø–ó–ê–ù –≤–∫–ª—é—á–∏—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ —Å–≤–æ–π –æ—Ç–≤–µ—Ç. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Å—Å—ã–ª–∫–∏ –∫–∞–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: [–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏](URL).\n3. –ï—Å–ª–∏ —Å—Å—ã–ª–æ–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏—Ö –≤—Å–µ.\n4. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Ç–µ, —Å–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º.`;
  
        const prompt = `–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n${knowledgeContext}\n\n–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:\n${chatHistory.slice(-5).map(msg => `${msg.role}: ${msg.content}`).join('\n')}\n\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${message}`;
        
        const textResponse = await InvokeLLM({ prompt: prompt });
  
        const aiAttachments = relevantItems
          .filter(item => item.image_url)
          .map(item => ({ name: item.title, url: item.image_url, type: 'image' }));
  
        return { textResponse, aiAttachments };
      } 
      // –®–∞–≥ 3: –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –∑–∞–¥–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å.
      else {
        const clarificationPrompt = `–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${message}".
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –∏ —Å–ø–∏—Å–æ–∫ —Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ —è –∑–Ω–∞—é:
${JSON.stringify(aiKnowledgeBase.filter(item => item.type !== 'xml_feed').map(i => i.title))}

–°—Ñ–æ—Ä–º–∏—Ä—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å. –ü—Ä–µ–¥–ª–æ–∂–∏ 3-4 –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Ç–µ–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ù–∞–ø—Ä–∏–º–µ—Ä: "–Ø –Ω–µ —Å–æ–≤—Å–µ–º —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ: ...?"`;
        
        const clarificationResponse = await InvokeLLM({ prompt: clarificationPrompt });
        
        return { textResponse: clarificationResponse, aiAttachments: [] };
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:", error);
      throw error;
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const clearChat = async () => {
    setMessages([]);
    const newSessionId = generateSessionId();
    setSessionId(newSessionId);
    if (user) {
      await User.updateMyUserData({ session_id: newSessionId });
    }
  };

  const handleScroll = () => {
    const container = chatContainerRef.current;
    if (container) {
      const { scrollTop, scrollHeight, clientHeight } = container;
      // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Ä—É—Ç–∏–ª –≤–≤–µ—Ä—Ö –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 300px
      const isScrolledUp = scrollHeight - scrollTop > clientHeight + 300;
      setShowScrollButton(isScrolledUp);
    }
  };

  return (
    <div className="h-full flex flex-col bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 relative">
      {/* Header - Only for desktop, mobile uses layout header */}
      <div className="hidden md:block absolute top-0 left-0 right-0 z-20 bg-white/40 backdrop-blur-md border-b border-white/10 p-6">
        <div className="flex items-center justify-between gap-4">
          <div className="flex items-center gap-3 flex-1 min-w-0">
            <div className="flex-1 min-w-0">
              <h1 className="text-2xl font-bold bg-gradient-to-r from-[#C31E2E] to-[#940815] bg-clip-text text-transparent truncate">
                –ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç
              </h1>
              <p className="text-sm text-slate-600 mt-1">–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ –Ω–∞—à–µ–π –±–∞–∑–µ</p>
            </div>
          </div>
          
          <Button
            variant="outline"
            size="sm"
            onClick={clearChat}
            className="bg-white/60 border-slate-200/50 hover:bg-white/80 transition-all duration-200 flex-shrink-0 backdrop-blur-sm"
          >
            <RotateCcw className="w-4 h-4 mr-2" />
            –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç
          </Button>
        </div>
      </div>

      {/* Messages - —Å –æ—Ç—Å—Ç—É–ø–æ–º —Å–Ω–∏–∑—É –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è –≤–≤–æ–¥–∞ */}
      <div 
        ref={chatContainerRef}
        onScroll={handleScroll}
        className="flex-1 overflow-y-auto pt-0 md:pt-28 p-6 pb-32 space-y-6"
      >
        <AnimatePresence>
          {messages.map((message) => (
            <ChatMessage key={message.id} message={message} />
          ))}
        </AnimatePresence>
        
        {isTyping && <TypingIndicator />}
        <div ref={messagesEndRef} />
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–Ω–∏–∑ */}
      <AnimatePresence>
        {showScrollButton && (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 10 }}
            className="absolute bottom-24 right-6 z-20"
          >
            <Button
              size="icon"
              onClick={scrollToBottom}
              className="rounded-full h-12 w-12 shadow-lg bg-white/80 backdrop-blur-md text-slate-700 hover:bg-white"
            >
              <ArrowDown className="w-6 h-6" />
            </Button>
          </motion.div>
        )}
      </AnimatePresence>

      {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ - z-index –º–µ–Ω—å—à–µ —á–µ–º —É —Å–∞–π–¥–±–∞—Ä–∞ */}
      <div className="fixed bottom-0 left-0 right-0 z-10 bg-white/90 backdrop-blur-xl border-t border-white/20 p-4 md:pl-80">
        <div className="max-w-6xl mx-auto">
          <div className="flex gap-3 items-end">
            <div className="flex-1 relative">
              <Textarea
                ref={textareaRef}
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                className="min-h-[52px] max-h-[150px] bg-white/80 border-slate-200 focus:border-red-300 focus:ring-red-300/20 rounded-xl resize-none w-full"
                disabled={isTyping}
              />
            </div>
            
            <Button
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isTyping}
              className="bg-gradient-to-r from-[#C31E2E] to-[#940815] hover:from-[#d12f3f] hover:to-[#a31b26] text-white rounded-xl px-5 h-[52px] transition-all duration-300 shadow-lg hover:shadow-[0_0_15px_rgba(195,30,46,0.4)] disabled:opacity-50 flex items-center justify-center flex-shrink-0"
            >
              {isTyping ? (
                <Loader2 className="w-5 h-5 animate-spin" />
              ) : (
                <Send className="w-5 h-5" />
              )}
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}
